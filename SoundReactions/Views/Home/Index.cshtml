@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1>Sound Reactions</h1>

    @*<input type="file" id="input" />
        <audio id="sound" controls></audio>*@
    <div class="row">

        <div class="canvases">
            <div class="col-md-6">
                <canvas id="osci"></canvas>
            </div>
            <div class="col-md-6">
                <canvas id="bars"></canvas>
            </div>
            <div class="col-md-6">
                <canvas id="colors"></canvas>
            </div>
        </div>

        <div class="col-md-6">
            <video autoplay="true" id="videoElement" style="min-width: 200px; height: 200px; margin: 0 auto"></video>
            <div>
                <label><strong>Saturation</strong><code>-webkit-filter:saturate(<span id="saturate-val">1</span>);</code></label>
                <input id="saturate" type="range" min="0" max="5" step="0.1" value="1" />
            </div>
        </div>

    </div>
    <div class="row">
        <div class="col-md-3">

            <div class="pitch-detector">
                <p>
                    @*<button onclick="this.innerText = togglePlayback()">use demo audio</button>*@
                    <button onclick="toggleLiveInput()">use live input</button>
                    @*<button onclick="toggleOscillator()">use oscillator</button>*@
                </p>

                <div id="detector" class="vague">
                    <div class="pitch"><span id="pitch">--</span>Hz</div>
                    <div class="note"><span id="note">--</span></div>
                    <canvas id="output" width=300 height=42></canvas>
                    <div id="detune"><span id="detune_amt">--</span><span id="flat">cents &#9837;</span><span id="sharp">cents &#9839;</span></div>
                </div>
            </div>

        </div>
        <div class="col-md-9">

            <div id="chart" style="min-width: 310px; height: 400px; margin: 0 auto"></div>

        </div>
    </div>
</div>

@section scripts {
    <script>
        //input.onchange = function (e) {
        //    var sound = document.getElementById('sound');
        //    sound.src = URL.createObjectURL(this.files[0]);
        //    sound.onend = function (e) {
        //        URL.revokeObjectURL(this.src);
        //    }
        //    initAudio();

        var osci = document.getElementById('osci');
        var osciCtx = osci.getContext("2d");
        var osciWIDTH = osci.width;
        var osciHEIGHT = osci.height;
        osciCtx.clearRect(0, 0, osciWIDTH, osciHEIGHT);

        var bars = document.getElementById('bars');
        var barsCtx = bars.getContext("2d");
        var barsWIDTH = bars.width;
        var barsHEIGHT = bars.height;
        barsCtx.clearRect(0, 0, barsWIDTH, barsHEIGHT);

        var colorsCanvas = document.getElementById("colors");
        var colorsCtx = colorsCanvas.getContext("2d");
        var colorsWIDTH = colorsCanvas.width;
        var colorsHEIGHT = colorsCanvas.height;
        colorsCtx.clearRect(0, 0, colorsWIDTH, colorsHEIGHT);

        //source = audioCtx.createMediaStreamSource(stream);
        //source.connect(analyser);
        //analyser.connect(distortion);
        //distortion.connect(audioCtx.destination);

        var audioCtx = new (window.AudioContext || window.webkitAudioContext)();
        var analyser = audioCtx.createAnalyser();
        analyser.fftSize = 2048;
        var bufferLength = analyser.frequencyBinCount;
        var dataArray = new Uint8Array(bufferLength);
        analyser.getByteTimeDomainData(dataArray);

        var distortion = audioCtx.createWaveShaper();
        var biquadFilter = audioCtx.createBiquadFilter();

        var minFreq = 100 //bufferLength /4*3;
        var maxFreq = 120;

        var totalIntensity = 0;
        function osciDraw() {
            drawVisual = requestAnimationFrame(osciDraw);
            analyser.getByteTimeDomainData(dataArray);

            osciCtx.fillStyle = 'rgb(0, 0, 0)';
            osciCtx.fillRect(0, 0, osciWIDTH, osciHEIGHT);
            osciCtx.lineWidth = 2;
            osciCtx.strokeStyle = 'rgb(0, 0, 0)';
            osciCtx.beginPath();

            var sliceWidth = osciWIDTH * 1.0 / bufferLength;
            var x = 0;

            var red = totalIntensity * 2 - 100;
            var blue = 255 - totalIntensity + 100
            var green = totalIntensity + 100

            osciCtx.strokeStyle = 'rgb(' + red + ', ' + green + ', ' + blue + ')';
            //console.log(totalIntensity);

            totalIntensity = 0;
            for (var i = 0; i < bufferLength; i++) {

                if (i < maxFreq && i > minFreq) {
                    totalIntensity += dataArray[i];
                }


                //var color = 0;
                //if (i < maxFreq && i > minFreq)
                //    color = 255;
                //else
                //    color = 0;

                var v = dataArray[i] / 128.0;
                var y = v * osciHEIGHT / 2;


                if (i === 0) {
                    osciCtx.moveTo(x, y);
                } else {
                    osciCtx.lineTo(x, y);
                }

                x += sliceWidth;
            }

            totalIntensity = totalIntensity / (maxFreq - minFreq);

            osciCtx.lineTo(osci.width, osci.height / 2);
            osciCtx.stroke();
        };

        function barsDraw() {

            drawVisual = requestAnimationFrame(barsDraw);

            analyser.getByteFrequencyData(dataArray);

            barsCtx.fillStyle = 'rgb(0, 0, 0)';
            barsCtx.fillRect(0, 0, barsWIDTH, barsHEIGHT);

            var barWidth = (barsWIDTH / bufferLength) * 2.5;
            var barHeight;
            var x = 0;

            for (var i = 0; i < bufferLength; i++) {

                var blue = 0;
                var red = 255;
                if (i < maxFreq && i > minFreq) {
                    blue = 255;
                    red = 0;
                }

                barHeight = dataArray[i];
                var green = (barHeight + 100)

                barsCtx.fillStyle = 'rgb(' + red + ', ' + green + ', ' + blue + ')';
                //barsCtx.fillStyle = 'rgb(' + color + ', ' + color + ', ' + color + ')';
                barsCtx.fillRect(x, barsHEIGHT - barHeight / 2, barWidth, barHeight);

                x += barWidth + 1;
            }

        };


        //This is where the main animation loop is
        //eventually, optimize that shit
        var iterations = 0;
        function backgroundDraw() {

            drawVisual = requestAnimationFrame(backgroundDraw);
            analyser.getByteFrequencyData(dataArray);

            var max = 0;
            var rawcolor = 0;

            for (var i = minFreq; i < maxFreq; i++) {
                rawcolor += dataArray[i];
            }

            rawcolor = rawcolor / (maxFreq - minFreq);

            //rawcolor

            if (iterations >= 6) {
                var redraw = chart.series[0].data.length > 50;
                chart.series[0].addPoint(rawcolor, true, redraw, false);
                iterations = 0;
            }

            //SATURATION
            //saturation is best from 0 to 5
            var saturate = (((rawcolor) * 5) / 255)            
            var filters = "saturate(" + saturate + ")";
            $("#videoElement").css('-webkit-filter', filters);
            $("#saturate-val").text(saturate);

            iterations++;
            //chart.redraw()

            //    if (rawcolor != 0) {

            //if (rawcolor > max)
            //    max = rawcolor;

            //var color = "#" + rawcolor;

            //var red = rawcolor;
            //var green = 255 - rawcolor;
            //var blue = 255 - rawcolor;

            var red = 0;
            var green = 0;
            var blue = 0;

            if (rawcolor < 25)
                red = 255;
            else if (rawcolor < 100)
                green = 255;
            else if (rawcolor < 255)
                blue = 255;

            var color = "rgb(" + red + ", " + green + ", " + blue + ")"

            colorsCtx.fillStyle = color;
            colorsCtx.fillRect(0, 0, colorsWIDTH, colorsHEIGHT);
            //}
            //}
        }

        function chartUpdate() {

        }

        if (navigator.mediaDevices.getUserMedia) {
            console.log('getUserMedia supported.');
            var constraints = { audio: true }
            navigator.mediaDevices.getUserMedia(constraints)
                .then(
                function (stream) {
                    source = audioCtx.createMediaStreamSource(stream);
                    source.connect(analyser);
                    //analyser.connect(distortion);
                    //distortion.connect(biquadFilter);
                    //biquadFilter.connect(convolver);
                    //convolver.connect(gainNode);
                    //gainNode.connect(audioCtx.destination);

                    osciDraw();
                    barsDraw();
                    backgroundDraw();
                    chartUpdate();
                })
                .catch(function (err) { alert('The following gUM error occured: ' + err); })
        } else {
            alert('getUserMedia not supported on your browser!');
        }

        //Init camera
        function getCoreUserMedia() {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(mediaStream => {
                    document.querySelector('video').srcObject = mediaStream;

                    const track = mediaStream.getVideoTracks()[0];
                    imageCapture = new ImageCapture(track);
                })
                .catch(error => alert(error));
        }
        getCoreUserMedia();


        //Init chart

        var chart;

        $(function () {

            $("input").on('change', function () {
                var saturate = $("#saturate").val();
                //var filters = "blur(" + blur + "px) saturate(" + saturate + ") hue-rotate(" + hue + "deg) brightness(" + brightness + ") contrast(" + contrast + ") invert(" + invert + ") sepia(" + sepia + ")";
                var filters = "saturate(" + saturate + ")";
                $("#videoElement").css('-webkit-filter', filters);
                $("#saturate-val").text(saturate);
            })

            chart = Highcharts.chart('chart', {
                chart: {
                    type: 'spline',
                    //animation: none, //Highcharts.svg, // don't animate in old IE
                    marginRight: 10
                },
                plotOptions: {
                    series: {
                        animation: false
                    },
                },
                credits: false,
                title: {
                    text: 'stream'
                },
                xAxis: {
                    type: 'datetime',
                    tickPixelInterval: 150
                },
                yAxis: {
                    title: {
                        text: 'Raw'
                    },
                    min: 0,
                    max: 200,
                    //plotLines: [{
                    //    value: 0,
                    //    width: 1,
                    //    color: '#808080'
                    //}]
                },
                //tooltip: {
                //    formatter: function () {
                //        return '<b>' + this.series.name + '</b><br/>' +
                //            Highcharts.dateFormat('%Y-%m-%d %H:%M:%S', this.x) + '<br/>' +
                //            Highcharts.numberFormat(this.y, 2);
                //    }
                //},
                //legend: {
                //    enabled: true
                //},
                exporting: {
                    enabled: false
                },
                //series: getRandomSeries()
                series: [{
                    name: "",
                    data: [0]
                }]
            });
        })

        //populate each series
        //function getMultipleRandomSeries() {
        //    var series = [];
        //    //for (i = 0; i < emotionParams.length; i++)
        //        series.push(getRandomSeries(0));
        //    return series;
        //}

        //initialise series
        function getRandomSeries(i) {
            return [{
                name: "",
                data:
                    (function () {
                        var data = [];

                        for (i = 0; i <= 10; i++) {
                            data.push({
                                x: i,
                                y: Math.random()
                            });
                        }
                        return data;
                    }())
            }]
        }

    </script>
}